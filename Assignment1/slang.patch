diff -ruN xv6-public-original/defs.h xv6-public/defs.h
--- xv6-public-original/defs.h	2022-08-10 02:14:12.477600000 +0530
+++ xv6-public/defs.h	2022-09-05 12:04:07.908259067 +0530
@@ -120,6 +120,9 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int 			thread_create(void(*)(void*), void*, void*);
+void 			thread_exit(void);
+int 			thread_join(void);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff -ruN xv6-public-original/Makefile xv6-public/Makefile
--- xv6-public-original/Makefile	2022-08-10 02:14:12.477600000 +0530
+++ xv6-public/Makefile	2022-09-05 12:04:07.948259602 +0530
@@ -181,6 +181,7 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_thread\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -249,7 +250,7 @@
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c thread.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
diff -ruN xv6-public-original/proc.c xv6-public/proc.c
--- xv6-public-original/proc.c	2022-08-10 02:14:12.481600000 +0530
+++ xv6-public/proc.c	2022-09-05 20:12:20.198283695 +0530
@@ -532,3 +532,136 @@
     cprintf("\n");
   }
 }
+
+int
+thread_create(void(*fcn)(void*), void *arg, void*stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *curproc = myproc();
+  
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy process state from proc.
+  np->pgdir = curproc->pgdir;  //p->pgdir holds the processâ€™s page table, an array of PTEs (Page Table Entries). 
+  np->sz = curproc->sz;
+  np->parent = curproc;
+  *np->tf = *curproc->tf;
+
+  np->tf->esp = (uint)stack + PGSIZE - 8;
+  np->tf->eip = (uint)fcn;
+  *((int*)(np->tf->esp)) = 0xffffffff; // given argument arg and a fake return PC (0xffffffff) for fcn.
+  *((int*)(np->tf->esp + 4)) = (int)arg;
+
+  // Clear %eax so that thread_create returns 0 in the child.
+  np->tf->eax = 0;
+
+  for(i = 0; i < NOFILE; i++)
+    if(curproc->ofile[i])
+      np->ofile[i] = filedup(curproc->ofile[i]);
+  np->cwd = idup(curproc->cwd);
+
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+
+  pid = np->pid;
+
+  acquire(&ptable.lock);
+
+  np->state = RUNNABLE;
+
+  release(&ptable.lock);
+
+  return pid;
+}
+
+// Exit the current process.  Does not return.
+// An exited process remains in the zombie state
+// until its parent calls wait() to find out it exited.
+void
+thread_exit(void)
+{
+  struct proc *curproc = myproc();
+  struct proc *p;
+  int fd;
+
+  if(curproc == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd]){
+      fileclose(curproc->ofile[fd]);
+      curproc->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(curproc->cwd);
+  end_op();
+  curproc->cwd = 0;
+
+  acquire(&ptable.lock);
+
+  // Parent might be sleeping in wait().
+  wakeup1(curproc->parent);
+
+  // Pass abandoned children to init.
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->parent == curproc){
+      p->parent = initproc;
+      if(p->state == ZOMBIE)
+        wakeup1(initproc);
+    }
+  }
+
+  // Jump into the scheduler, never to return.
+  curproc->state = ZOMBIE;
+  sched();
+  panic("zombie exit");
+}
+
+// Wait for a child process to exit and return its pid.
+// Return -1 if this process has no children.
+int
+thread_join(void)
+{
+  struct proc *p;
+  int havekids, pid;
+  struct proc *curproc = myproc();
+  
+  acquire(&ptable.lock);
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->parent != curproc)
+        continue;
+      havekids = 1;
+      if(p->state == ZOMBIE){
+        // Found one.
+        pid = p->pid;
+        kfree(p->kstack);
+        p->kstack = 0;
+        p->pid = 0;
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+        p->state = UNUSED;
+        release(&ptable.lock);
+        return pid;
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || curproc->killed){
+      release(&ptable.lock);
+      return -1;
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+  }
+}
\ No newline at end of file
diff -ruN xv6-public-original/syscall.c xv6-public/syscall.c
--- xv6-public-original/syscall.c	2022-08-10 02:14:12.481600000 +0530
+++ xv6-public/syscall.c	2022-09-05 12:04:07.956259709 +0530
@@ -103,6 +103,9 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_thread_create(void);
+extern int sys_thread_exit(void);
+extern int sys_thread_join(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +129,9 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create]   sys_thread_create,
+[SYS_thread_exit]   sys_thread_exit,
+[SYS_thread_join]   sys_thread_join,
 };
 
 void
@@ -142,4 +148,4 @@
             curproc->pid, curproc->name, num);
     curproc->tf->eax = -1;
   }
-}
+}
\ No newline at end of file
diff -ruN xv6-public-original/syscall.h xv6-public/syscall.h
--- xv6-public-original/syscall.h	2022-08-10 02:14:12.481600000 +0530
+++ xv6-public/syscall.h	2022-09-05 12:04:07.956259709 +0530
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create  22
+#define SYS_thread_exit    23
+#define SYS_thread_join    24
\ No newline at end of file
diff -ruN xv6-public-original/sysproc.c xv6-public/sysproc.c
--- xv6-public-original/sysproc.c	2022-08-10 02:14:12.481600000 +0530
+++ xv6-public/sysproc.c	2022-09-05 12:04:07.956259709 +0530
@@ -27,6 +27,31 @@
 }
 
 int
+sys_thread_create(void)
+{
+  int fcn;
+  //char *arg;
+  int arg;
+  char *stack;
+  if(argint(0, &fcn) < 0 || argint(1, &arg) < 0 || argptr(2, &stack, 4096) < 0)
+    return -1;
+  return thread_create((void(*)(void*))fcn, (void*)arg, stack);
+}
+
+int
+sys_thread_exit(void)
+{
+  thread_exit();
+  return 0;  // not reached
+}
+
+int
+sys_thread_join(void)
+{
+  return thread_join();
+}
+
+int
 sys_kill(void)
 {
   int pid;
@@ -88,4 +113,4 @@
   xticks = ticks;
   release(&tickslock);
   return xticks;
-}
+}
\ No newline at end of file
diff -ruN xv6-public-original/thread.c xv6-public/thread.c
--- xv6-public-original/thread.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/thread.c	2022-09-05 23:05:50.386366699 +0530
@@ -0,0 +1,114 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "x86.h"
+
+struct balance
+{
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+
+struct thread_spinlock {
+  uint locked;   
+};
+
+
+void thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+}
+
+void thread_spin_lock(struct thread_spinlock *lk)
+{
+  while(xchg(&lk->locked, 1) != 0)
+    ;
+
+  __sync_synchronize();
+}
+
+void thread_spin_unlock(struct thread_spinlock *lk)
+{
+  __sync_synchronize();
+
+  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
+}
+
+struct thread_mutex {
+  uint locked;
+};
+
+void thread_mutex_init(struct thread_mutex *mutex)
+{
+  mutex->locked = 0;
+}
+
+void thread_mutex_lock(struct thread_mutex *mutex)
+{
+  while(xchg(&mutex->locked, 1) != 0)
+    sleep(1);
+
+  __sync_synchronize();
+}
+
+void thread_mutex_unlock(struct thread_mutex *mutex)
+{
+  __sync_synchronize();
+
+  asm volatile("movl $0, %0" : "+m" (mutex->locked) : );
+}
+
+struct thread_spinlock lock;
+// struct thread_mutex mutex;
+
+
+volatile unsigned int delay (unsigned int d)
+{
+    unsigned int i;
+    for (i = 0; i < d; i++)
+    {
+        __asm volatile( "nop" ::: );
+    }
+    return i;
+}
+
+void do_work(void *arg)
+{
+    int i;
+    int old;
+    struct balance *b = (struct balance*) arg;
+    printf(1, "Starting do_work: s:%s\n", b->name);
+    for (i = 0; i < b->amount; i++)
+    {
+        thread_spin_lock(&lock);
+        // thread_mutex_lock(&mutex);
+        old = total_balance;
+        delay(100000);
+        total_balance = old + 1;
+        thread_spin_unlock(&lock);
+        // thread_mutex_unlock(&mutex);
+    }
+    printf(1, "Done s:%x\n", b->name);
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+    struct balance b1 = {"b1", 3200};
+    struct balance b2 = {"b2", 2800};
+    void *s1, *s2;
+    int t1, t2, r1, r2;
+    s1 = malloc(4096);
+    s2 = malloc(4096);
+    thread_spin_init(&lock);
+    // thread_mutex_init(&mutex);
+    t1 = thread_create(do_work, (void*)&b1, s1);
+    t2 = thread_create(do_work, (void*)&b2, s2);
+    r1 = thread_join();
+    r2 = thread_join();
+    printf(1, "Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+    t1, r1, t2, r2, total_balance);
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public-original/user.h xv6-public/user.h
--- xv6-public-original/user.h	2022-08-10 02:14:12.481600000 +0530
+++ xv6-public/user.h	2022-09-05 12:04:07.960259763 +0530
@@ -23,6 +23,9 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*)(void*), void*, void*);
+int thread_exit(void) __attribute__((noreturn));
+int thread_join(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff -ruN xv6-public-original/usys.S xv6-public/usys.S
--- xv6-public-original/usys.S	2022-08-10 02:14:12.481600000 +0530
+++ xv6-public/usys.S	2022-09-05 12:04:07.964259816 +0530
@@ -29,3 +29,6 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(thread_create)
+SYSCALL(thread_exit)
+SYSCALL(thread_join)
\ No newline at end of file
