diff -ruN xv6-public-original/defs.h xv6-public/defs.h
--- xv6-public-original/defs.h	2022-10-05 00:20:24.919481658 +0530
+++ xv6-public/defs.h	2022-10-05 00:20:02.011618430 +0530
@@ -8,6 +8,7 @@
 struct spinlock;
 struct sleeplock;
 struct stat;
+struct processInfo;
 struct superblock;
 
 // bio.c
@@ -120,6 +121,11 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+// Added for assignment 2
+int             getNumProc(void);
+int             getMaxPid(void);
+int             getProcInfo(int, struct processInfo*);
+int             set_burst_time(int);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff -ruN xv6-public-original/getMaxPid.c xv6-public/getMaxPid.c
--- xv6-public-original/getMaxPid.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/getMaxPid.c	2022-10-05 00:20:02.123617942 +0530
@@ -0,0 +1,14 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void)
+{
+	int mpid = getMaxPid();
+	if(mpid < 0)
+	{
+		printf(1, "No active processes in process table.\n");
+	}
+	else printf(1, "Greatest PID: %d\n", getMaxPid());
+	exit();
+}
\ No newline at end of file
diff -ruN xv6-public-original/getNumProc.c xv6-public/getNumProc.c
--- xv6-public-original/getNumProc.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/getNumProc.c	2022-10-05 00:20:02.123617942 +0530
@@ -0,0 +1,9 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void)
+{
+	printf(1, "Number of currently active processes: %d\n", getNumProc());
+	exit();
+}
\ No newline at end of file
diff -ruN xv6-public-original/getProcInfo.c xv6-public/getProcInfo.c
--- xv6-public-original/getProcInfo.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/getProcInfo.c	2022-10-05 00:20:02.167617751 +0530
@@ -0,0 +1,30 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+int main(int argc, char *argv[])
+{	
+	if(argc < 2){
+    	  printf(2, "Usage: getProcInfo...\n");
+    	  exit();
+  	}
+  	
+  	for(int i=1; i<argc; i++)
+  	{
+  		struct processInfo* ptr;
+  		ptr = (struct processInfo*) malloc(sizeof(struct processInfo));
+  		
+  		if(getProcInfo(atoi(argv[i]), ptr) < 0)
+  		{
+  			printf(2, "getProcInfo: %s failed\n", argv[i]);
+  			break;
+  		}
+  		
+  		printf(1, "PPID: %d\n", ptr->ppid);
+  		printf(1, "Psize: %d\n", ptr->psize);
+  		printf(1, "Context switches: %d\n", ptr->numberContextSwitches);
+  	}
+  	
+  	exit();
+}
\ No newline at end of file
diff -ruN xv6-public-original/Makefile xv6-public/Makefile
--- xv6-public-original/Makefile	2022-10-05 00:20:24.843482233 +0530
+++ xv6-public/Makefile	2022-10-07 02:09:24.585075188 +0530
@@ -181,6 +181,12 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_getNumProc\
+	_getMaxPid\
+	_getProcInfo\
+	_set_burst_time\
+	_test_one\
+	_test_two\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff -ruN xv6-public-original/param.h xv6-public/param.h
--- xv6-public-original/param.h	2022-10-05 00:20:25.115480160 +0530
+++ xv6-public/param.h	2022-10-07 22:05:14.879095944 +0530
@@ -1,6 +1,7 @@
 #define NPROC        64  // maximum number of processes
 #define KSTACKSIZE 4096  // size of per-process kernel stack
-#define NCPU          8  // maximum number of CPUs
+// #define NCPU          8  // maximum number of CPUs
+#define NCPU          1  // maximum number of CPUs
 #define NOFILE       16  // open files per process
 #define NFILE       100  // open files per system
 #define NINODE       50  // maximum number of active i-nodes
diff -ruN xv6-public-original/proc.c xv6-public/proc.c
--- xv6-public-original/proc.c	2022-10-05 00:20:25.179479669 +0530
+++ xv6-public/proc.c	2022-10-07 22:22:25.052051153 +0530
@@ -6,6 +6,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "processInfo.h"
 
 struct {
   struct spinlock lock;
@@ -80,7 +81,7 @@
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
     if(p->state == UNUSED)
-      goto found;
+        goto found;
 
   release(&ptable.lock);
   return 0;
@@ -88,6 +89,11 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->contextswitches = 0;
+  // p->burst = 0;
+  p->burst = 1;
+  p->time_slice = 1;
+  p->first_proc = 0;
 
   release(&ptable.lock);
 
@@ -319,39 +325,178 @@
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
+// void
+// scheduler(void)
+// {
+//   struct proc *p;
+//   struct cpu *c = mycpu();
+//   c->proc = 0;
+  
+//   for(;;){
+//     // Enable interrupts on this processor.
+//     sti();
+
+//     // Loop over process table looking for process to run.
+//     acquire(&ptable.lock);
+//     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+//       if(p->state != RUNNABLE)
+//         continue;
+
+//       // Switch to chosen process.  It is the process's job
+//       // to release ptable.lock and then reacquire it
+//       // before jumping back to us.
+//       c->proc = p;
+//       switchuvm(p);
+//       p->state = RUNNING;
+
+//       swtch(&(c->scheduler), p->context);
+
+//       // increment number of context switches
+//       p->contextswitches = p->contextswitches + 1;
+
+//       switchkvm();
+
+//       // Process is done running for now.
+//       // It should have changed its p->state before coming back.
+//       c->proc = 0;
+//     }
+//     release(&ptable.lock);
+
+//   }
+// }
+
+// Shortest Job First Scheduler
+// void
+// scheduler(void)
+// {
+//   struct proc *p;
+//   struct cpu *c = mycpu();
+//   c->proc = 0;
+  
+//   for(;;){
+//     // Enable interrupts on this processor.
+//     sti();
+    
+// 		acquire(&ptable.lock);
+// 		// To store the job with least burst time
+//     struct proc *shortest_job = 0;
+
+// 		// Find the job with least burst time
+//     for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+//     {
+//       if (p->state != RUNNABLE)
+//         continue;
+
+//       if (!shortest_job)
+//       {
+//         shortest_job = p;
+//       }
+//       else
+//       {
+//         if (p->burst < shortest_job->burst)
+//         {
+//           shortest_job = p;
+//         }
+//       }
+//     }
+    
+//     if (shortest_job)
+//     {
+//       p = shortest_job;
+//       //cprintf("BT%d \n", p->burst);
+//       // Switch to chosen process.  It is the process's job
+//       // to release ptable.lock and then reacquire it
+//       // before jumping back to us.
+//       c->proc = p;
+//       switchuvm(p);
+//       p->state = RUNNING;
+
+//       swtch(&(c->scheduler), p->context);
+      
+//       // increment number of context switches
+//       p->contextswitches = p->contextswitches + 1;
+//       switchkvm();
+
+//       // Process is done running for now.
+//       // It should have changed its p->state before coming back.
+//       c->proc = 0;
+//     }
+//     release(&ptable.lock);
+//   }
+// }
+
 void
 scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
+  int flag = 1;
   for(;;){
     // Enable interrupts on this processor.
     sti();
-
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
-    }
-    release(&ptable.lock);
-
+    
+	acquire(&ptable.lock);
+	
+	// Set up Ready Queue
+	struct proc * RQ[NPROC];
+	
+	int k = 0;
+	
+	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+	{
+		if(p->state == RUNNABLE)
+		{
+			RQ[k++] = p;
+		}
+	}
+	struct proc *t;
+	// Sort Ready Queue
+	for (int i = 0; i < k; i++)
+	{
+		for(int j = i + 1; j < k; j++)
+		{
+			if(RQ[i]->burst > RQ[j]->burst)
+			{
+				t = RQ[i];
+				RQ[i] = RQ[j];
+				RQ[j] = t;
+			}
+		}
+	}
+	if(k && flag)
+	{
+		RQ[0]->first_proc = 1;
+		flag = 0;
+	}
+		
+
+		// Find the job with least burst time
+    for (int i = 0; i < k; i++)
+    {
+    	p = RQ[i];
+		  if (p->state == RUNNABLE)
+		  {
+		    // cprintf("BT %d \n", i);
+		    // Switch to chosen process.  It is the process's job
+		    // to release ptable.lock and then reacquire it
+		    // before jumping back to us.
+		    c->proc = p;
+		    switchuvm(p);
+		    p->state = RUNNING;
+
+		    swtch(&(c->scheduler), p->context);
+		    
+		    // increment number of context switches
+		    p->contextswitches = p->contextswitches + 1;
+		    switchkvm();
+
+		    // Process is done running for now.
+		    // It should have changed its p->state before coming back.
+		    c->proc = 0;
+		  }
+		 }
+		  release(&ptable.lock);
   }
 }
 
@@ -532,3 +677,69 @@
     cprintf("\n");
   }
 }
+
+int getNumProc(void)
+{
+	struct proc *p;
+
+	int count = 0;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state != UNUSED)
+    {
+    	count++;
+    }
+  }
+  release(&ptable.lock);
+  return count;
+}
+
+int getMaxPid(void)
+{
+	struct proc *p;
+
+	int max = -1;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state != UNUSED)
+    {
+    	if(p->pid > max)
+    	max = p->pid;
+    }
+  }
+  release(&ptable.lock);
+  return max;
+}
+
+int getProcInfo(int pid, struct processInfo* st)
+{
+	struct proc *p;
+	int flag = -1;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->pid == pid)
+    {
+    	st->ppid = 0;
+    	// check if parent exists
+      if(p->parent != 0)
+      { 
+          st->ppid = p->parent->pid; 
+      }
+      st->psize = p->sz;
+      st->numberContextSwitches = p->contextswitches;
+			flag = 0;
+    	break;
+    }
+  }
+  release(&ptable.lock);
+  return flag;
+}
+
+int set_burst_time(int bt)
+{
+	
+	myproc()->burst = bt;
+	// skip one CPU scheduling round.
+	yield();
+	return 0;
+}
diff -ruN xv6-public-original/processInfo.h xv6-public/processInfo.h
--- xv6-public-original/processInfo.h	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/processInfo.h	2022-10-05 00:20:02.351616950 +0530
@@ -0,0 +1,6 @@
+struct processInfo
+{
+    int ppid;
+    int psize;
+    int numberContextSwitches;
+};
diff -ruN xv6-public-original/proc.h xv6-public/proc.h
--- xv6-public-original/proc.h	2022-10-05 00:20:25.187479607 +0530
+++ xv6-public/proc.h	2022-10-07 22:28:11.057693666 +0530
@@ -49,6 +49,10 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int contextswitches;		// store number of context switches
+  int burst;			// store approximate burst time for sjf scheduling
+  int time_slice; // for time quanta
+  int first_proc; // to indicate shortest process
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff -ruN xv6-public-original/set_burst_time.c xv6-public/set_burst_time.c
--- xv6-public-original/set_burst_time.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/set_burst_time.c	2022-10-05 00:20:02.383616809 +0530
@@ -0,0 +1,25 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char* argv[])
+{
+
+	if(argc < 2)
+	{
+		printf(2, "Usage: set_burst_time...\n");
+		exit();
+	}
+    	
+	int n = atoi(argv[1]);
+    	
+	if(set_burst_time(n) < 0)
+	{
+		printf(2, "set_burst_time failed\n");
+		exit();
+	}
+	
+	printf(1, "Burst time set to %d.\n", get_burst_time());
+	
+	exit();
+}	
\ No newline at end of file
diff -ruN xv6-public-original/syscall.c xv6-public/syscall.c
--- xv6-public-original/syscall.c	2022-10-05 00:20:25.315478622 +0530
+++ xv6-public/syscall.c	2022-10-05 00:20:02.447616531 +0530
@@ -103,6 +103,11 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_getNumProc(void);
+extern int sys_getMaxPid(void);
+extern int sys_getProcInfo(void);
+extern int sys_set_burst_time(void);
+extern int sys_get_burst_time(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +131,11 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getNumProc]   sys_getNumProc,
+[SYS_getMaxPid]   sys_getMaxPid,
+[SYS_getProcInfo]   sys_getProcInfo,
+[SYS_set_burst_time]   sys_set_burst_time,
+[SYS_get_burst_time]   sys_get_burst_time
 };
 
 void
diff -ruN xv6-public-original/syscall.h xv6-public/syscall.h
--- xv6-public-original/syscall.h	2022-10-05 00:20:25.319478592 +0530
+++ xv6-public/syscall.h	2022-10-05 00:20:02.451616514 +0530
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getNumProc  22
+#define SYS_getMaxPid  23
+#define SYS_getProcInfo 24
+#define SYS_set_burst_time  25
+#define SYS_get_burst_time  26
\ No newline at end of file
diff -ruN xv6-public-original/sysproc.c xv6-public/sysproc.c
--- xv6-public-original/sysproc.c	2022-10-05 00:20:25.331478499 +0530
+++ xv6-public/sysproc.c	2022-10-07 22:25:02.538404661 +0530
@@ -6,6 +6,67 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "processInfo.h"
+#include "spinlock.h"
+
+struct {
+  struct spinlock lock;
+  struct proc proc[NPROC];
+} ptable;
+
+
+// Assignment 2 system calls
+
+int sys_getNumProc(void)
+{
+	return getNumProc();
+}
+
+int sys_getMaxPid(void)
+{
+  return getMaxPid();
+}
+
+int sys_getProcInfo(void)
+{
+	int pid;
+	struct processInfo* st;
+	
+	if(argint(0, &pid) < 0)
+    return -1;
+
+
+  if(argptr(1, (void*)&st, sizeof(st)) < 0)
+    return -1;
+
+  return getProcInfo(pid, st);
+}
+
+int
+sys_set_burst_time()
+{   
+  int bt;
+  
+  if(argint(0, &bt) < 0)
+      return -1;
+      
+  // if(bt <= 0)
+  // {
+  // 	return -1;
+  // }
+      
+	set_burst_time(bt);
+	
+  return 0;
+}
+
+int
+sys_get_burst_time()
+{
+  return myproc()->burst;
+}
+
+// Assignment 2 system calls end
 
 int
 sys_fork(void)
diff -ruN xv6-public-original/test_one.c xv6-public/test_one.c
--- xv6-public-original/test_one.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/test_one.c	2022-10-05 09:29:07.132163643 +0530
@@ -0,0 +1,62 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+#include "processInfo.h"
+int main()
+{	
+	// array containing burst times
+	int t[10] = {40, 70, 10, 90, 60, 30, 20, 80, 100, 50};
+	long x = 0;
+	set_burst_time(1);
+	
+	for(int i=0; i<10; i++)
+	{
+		if(fork() == 0)
+		{
+			x = set_burst_time(t[i]);
+			
+			if(x < 0)
+			{
+				printf(1, "Counldn't set burst time for process %d\n", getpid());
+			}
+			
+			// CPU bound process
+			if(i%2 == 0)
+			{
+				double y = 0;
+				
+				// code to add delay
+				for(int i2=0; i2<t[i]*1000000/2; i2++)
+				{
+					y += 2.69*13.01;
+				}
+				x = y;
+				
+				printf(1, "CPU Bound(%d) / ",  x);
+			}
+			
+			// IO bound process
+			else
+			{
+				// mimicking IO wait
+				for(int i2=0; i2<t[i]*10; i2++)
+				{
+					sleep(1);
+				}
+				printf(1, "IO Bound / ");
+			}
+			
+			x = get_burst_time();
+			struct processInfo *info;
+			info = (struct processInfo*) malloc(sizeof(struct processInfo));
+			getProcInfo(getpid(), info);
+			printf(1, "Burst Time: %d Context Switches: %d\n", x, info->numberContextSwitches);
+			exit();
+						
+		}
+	}
+	
+	while(wait() != -1);
+	exit();
+}
\ No newline at end of file
Binary files xv6-public-original/_test_scheduler and xv6-public/_test_scheduler differ
diff -ruN xv6-public-original/test_two.c xv6-public/test_two.c
--- xv6-public-original/test_two.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/test_two.c	2022-10-05 09:29:27.330694952 +0530
@@ -0,0 +1,62 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+int main()
+{	
+	// array containing burst times
+	int t[10] = {100, 90, 80, 70, 60, 50, 40, 30, 20, 10};
+	int x = 0;
+	set_burst_time(1);
+	
+	for(int i=0; i<10; i++)
+	{
+		if(fork() == 0)
+		{
+			x = set_burst_time(t[i]);
+			
+			if(x < 0)
+			{
+				printf(1, "Counldn't set burst time for process %d\n", getpid());
+			}
+			
+			// CPU bound process
+			if(i >= 5)
+			{
+				double y = 0;
+				
+				// code to add delay
+				for(int i2=0; i2<t[i]*1000000/2; i2++)
+				{
+					y += 2.69*13.01;
+				}
+				x = y;
+				
+				printf(1, "CPU Bound(%d) / ",  x);
+			}
+			
+			// IO bound process
+			else
+			{
+				// mimicking IO wait
+				for(int i2=0; i2<t[i]*10; i2++)
+				{
+					sleep(1);
+				}
+				printf(1, "IO Bound / ");
+			}
+			
+			x = get_burst_time();
+			struct processInfo *info;
+			info = (struct processInfo*) malloc(sizeof(struct processInfo));
+			getProcInfo(getpid(), info);
+			printf(1, "Burst Time: %d Context Switches: %d\n", x, info->numberContextSwitches);
+			exit();
+						
+		}
+	}
+	
+	while(wait() != -1);
+	exit();
+}
\ No newline at end of file
diff -ruN xv6-public-original/trap.c xv6-public/trap.c
--- xv6-public-original/trap.c	2022-10-05 00:20:25.363478254 +0530
+++ xv6-public/trap.c	2022-10-07 22:30:16.224399682 +0530
@@ -14,6 +14,9 @@
 struct spinlock tickslock;
 uint ticks;
 
+int time_quanta = -1;
+int first_pid = -1;
+
 void
 tvinit(void)
 {
@@ -104,7 +107,28 @@
   // If interrupts were on while locks held, would need to check nlock.
   if(myproc() && myproc()->state == RUNNING &&
      tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+  {
+  	if(myproc()->first_proc && (first_pid == -1 || first_pid == myproc()->pid))
+  	{
+  		myproc()->time_slice++;
+  		time_quanta = myproc()->time_slice + 1;
+  		first_pid = myproc()->pid;
+  	}
+  	else 
+  	{
+	  	if(myproc()->time_slice < time_quanta)
+	  	{
+	  		myproc()->time_slice++;
+	  	}
+	  	else {
+	  		myproc()->time_slice = 0;
+	  		yield();
+	  	}
+  	}
+  }
+  // if(myproc() && myproc()->state == RUNNING &&
+  //    tf->trapno == T_IRQ0+IRQ_TIMER)
+  //   yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
diff -ruN xv6-public-original/user.h xv6-public/user.h
--- xv6-public-original/user.h	2022-10-05 00:20:25.475477392 +0530
+++ xv6-public/user.h	2022-10-05 00:20:02.519616217 +0530
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct processInfo;
 
 // system calls
 int fork(void);
@@ -23,6 +24,11 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getNumProc(void);
+int getMaxPid(void);
+int getProcInfo(int pid, struct processInfo*);
+int set_burst_time(int n);
+int get_burst_time(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff -ruN xv6-public-original/usys.S xv6-public/usys.S
--- xv6-public-original/usys.S	2022-10-05 00:20:25.495477239 +0530
+++ xv6-public/usys.S	2022-10-05 00:20:02.523616200 +0530
@@ -29,3 +29,8 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getNumProc)
+SYSCALL(getMaxPid)
+SYSCALL(getProcInfo)
+SYSCALL(set_burst_time)
+SYSCALL(get_burst_time)
\ No newline at end of file
